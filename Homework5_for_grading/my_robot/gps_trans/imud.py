"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class imud(object):
    __slots__ = ["ya", "pit", "rol", "magx", "magy", "magz", "accx", "accy", "accz", "gyrox_radps", "gyroy_radps", "gyroz_radps"]

    def __init__(self):
        self.ya = 0.0
        self.pit = 0.0
        self.rol = 0.0
        self.magx = 0.0
        self.magy = 0.0
        self.magz = 0.0
        self.accx = 0.0
        self.accy = 0.0
        self.accz = 0.0
        self.gyrox_radps = 0.0
        self.gyroy_radps = 0.0
        self.gyroz_radps = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(imud._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dddddddddddd", self.ya, self.pit, self.rol, self.magx, self.magy, self.magz, self.accx, self.accy, self.accz, self.gyrox_radps, self.gyroy_radps, self.gyroz_radps))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != imud._get_packed_fingerprint():
            raise ValueError("Decode error")
        return imud._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = imud()
        self.ya, self.pit, self.rol, self.magx, self.magy, self.magz, self.accx, self.accy, self.accz, self.gyrox_radps, self.gyroy_radps, self.gyroz_radps = struct.unpack(">dddddddddddd", buf.read(96))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if imud in parents: return 0
        tmphash = (0x9aab39153a5ee912) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if imud._packed_fingerprint is None:
            imud._packed_fingerprint = struct.pack(">Q", imud._get_hash_recursive([]))
        return imud._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

