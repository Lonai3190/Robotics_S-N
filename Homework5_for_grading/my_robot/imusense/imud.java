/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package imusense;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class imud implements lcm.lcm.LCMEncodable
{
    public double ya;
    public double pit;
    public double rol;
    public double magx;
    public double magy;
    public double magz;
    public double accx;
    public double accy;
    public double accz;
    public double gyrox_radps;
    public double gyroy_radps;
    public double gyroz_radps;
 
    public imud()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9aab39153a5ee912L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(imusense.imud.class))
            return 0L;
 
        classes.add(imusense.imud.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeDouble(this.ya); 
 
        outs.writeDouble(this.pit); 
 
        outs.writeDouble(this.rol); 
 
        outs.writeDouble(this.magx); 
 
        outs.writeDouble(this.magy); 
 
        outs.writeDouble(this.magz); 
 
        outs.writeDouble(this.accx); 
 
        outs.writeDouble(this.accy); 
 
        outs.writeDouble(this.accz); 
 
        outs.writeDouble(this.gyrox_radps); 
 
        outs.writeDouble(this.gyroy_radps); 
 
        outs.writeDouble(this.gyroz_radps); 
 
    }
 
    public imud(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public imud(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static imusense.imud _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        imusense.imud o = new imusense.imud();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.ya = ins.readDouble();
 
        this.pit = ins.readDouble();
 
        this.rol = ins.readDouble();
 
        this.magx = ins.readDouble();
 
        this.magy = ins.readDouble();
 
        this.magz = ins.readDouble();
 
        this.accx = ins.readDouble();
 
        this.accy = ins.readDouble();
 
        this.accz = ins.readDouble();
 
        this.gyrox_radps = ins.readDouble();
 
        this.gyroy_radps = ins.readDouble();
 
        this.gyroz_radps = ins.readDouble();
 
    }
 
    public imusense.imud copy()
    {
        imusense.imud outobj = new imusense.imud();
        outobj.ya = this.ya;
 
        outobj.pit = this.pit;
 
        outobj.rol = this.rol;
 
        outobj.magx = this.magx;
 
        outobj.magy = this.magy;
 
        outobj.magz = this.magz;
 
        outobj.accx = this.accx;
 
        outobj.accy = this.accy;
 
        outobj.accz = this.accz;
 
        outobj.gyrox_radps = this.gyrox_radps;
 
        outobj.gyroy_radps = this.gyroy_radps;
 
        outobj.gyroz_radps = this.gyroz_radps;
 
        return outobj;
    }
 
}

