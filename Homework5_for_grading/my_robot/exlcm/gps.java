/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package exlcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class gps implements lcm.lcm.LCMEncodable
{
    public float time;
    public float lat;
    public float lon;
    public float alt;
    public float utmx;
    public float utmy;
    public byte zone_num;
    public String zone;
    public float mtime;
 
    public gps()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8bd5987db28222daL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(exlcm.gps.class))
            return 0L;
 
        classes.add(exlcm.gps.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeFloat(this.time); 
 
        outs.writeFloat(this.lat); 
 
        outs.writeFloat(this.lon); 
 
        outs.writeFloat(this.alt); 
 
        outs.writeFloat(this.utmx); 
 
        outs.writeFloat(this.utmy); 
 
        outs.writeByte(this.zone_num); 
 
        __strbuf = new char[this.zone.length()]; this.zone.getChars(0, this.zone.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeFloat(this.mtime); 
 
    }
 
    public gps(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public gps(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static exlcm.gps _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        exlcm.gps o = new exlcm.gps();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.time = ins.readFloat();
 
        this.lat = ins.readFloat();
 
        this.lon = ins.readFloat();
 
        this.alt = ins.readFloat();
 
        this.utmx = ins.readFloat();
 
        this.utmy = ins.readFloat();
 
        this.zone_num = ins.readByte();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.zone = new String(__strbuf);
 
        this.mtime = ins.readFloat();
 
    }
 
    public exlcm.gps copy()
    {
        exlcm.gps outobj = new exlcm.gps();
        outobj.time = this.time;
 
        outobj.lat = this.lat;
 
        outobj.lon = this.lon;
 
        outobj.alt = this.alt;
 
        outobj.utmx = this.utmx;
 
        outobj.utmy = this.utmy;
 
        outobj.zone_num = this.zone_num;
 
        outobj.zone = this.zone;
 
        outobj.mtime = this.mtime;
 
        return outobj;
    }
 
}

