"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class gps(object):
    __slots__ = ["time", "lat", "lon", "alt", "utmx", "utmy", "zone_num", "zone", "mtime"]

    def __init__(self):
        self.time = 0.0
        self.lat = 0.0
        self.lon = 0.0
        self.alt = 0.0
        self.utmx = 0.0
        self.utmy = 0.0
        self.zone_num = 0
        self.zone = ""
        self.mtime = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(gps._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ffffffb", self.time, self.lat, self.lon, self.alt, self.utmx, self.utmy, self.zone_num))
        __zone_encoded = self.zone.encode('utf-8')
        buf.write(struct.pack('>I', len(__zone_encoded)+1))
        buf.write(__zone_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">f", self.mtime))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != gps._get_packed_fingerprint():
            raise ValueError("Decode error")
        return gps._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = gps()
        self.time, self.lat, self.lon, self.alt, self.utmx, self.utmy, self.zone_num = struct.unpack(">ffffffb", buf.read(25))
        __zone_len = struct.unpack('>I', buf.read(4))[0]
        self.zone = buf.read(__zone_len)[:-1].decode('utf-8', 'replace')
        self.mtime = struct.unpack(">f", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if gps in parents: return 0
        tmphash = (0x8bd5987db28222da) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if gps._packed_fingerprint is None:
            gps._packed_fingerprint = struct.pack(">Q", gps._get_hash_recursive([]))
        return gps._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

