"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class direction(object):
    __slots__ = ["timestamp", "latitude", "direction1", "longitude", "direction2", "altitude", "utm_x", "utm_y"]

    def __init__(self):
        self.timestamp = 0
        self.latitude = 0.0
        self.direction1 = ""
        self.longitude = 0.0
        self.direction2 = ""
        self.altitude = 0
        self.utm_x = 0.0
        self.utm_y = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(direction._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qd", self.timestamp, self.latitude))
        __direction1_encoded = self.direction1.encode('utf-8')
        buf.write(struct.pack('>I', len(__direction1_encoded)+1))
        buf.write(__direction1_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">d", self.longitude))
        __direction2_encoded = self.direction2.encode('utf-8')
        buf.write(struct.pack('>I', len(__direction2_encoded)+1))
        buf.write(__direction2_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">idd", self.altitude, self.utm_x, self.utm_y))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != direction._get_packed_fingerprint():
            raise ValueError("Decode error")
        return direction._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = direction()
        self.timestamp, self.latitude = struct.unpack(">qd", buf.read(16))
        __direction1_len = struct.unpack('>I', buf.read(4))[0]
        self.direction1 = buf.read(__direction1_len)[:-1].decode('utf-8', 'replace')
        self.longitude = struct.unpack(">d", buf.read(8))[0]
        __direction2_len = struct.unpack('>I', buf.read(4))[0]
        self.direction2 = buf.read(__direction2_len)[:-1].decode('utf-8', 'replace')
        self.altitude, self.utm_x, self.utm_y = struct.unpack(">idd", buf.read(20))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if direction in parents: return 0
        tmphash = (0x4b80028f4ee69f94) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if direction._packed_fingerprint is None:
            direction._packed_fingerprint = struct.pack(">Q", direction._get_hash_recursive([]))
        return direction._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

